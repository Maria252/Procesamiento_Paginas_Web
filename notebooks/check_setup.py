#!/usr/bin/env python3
"""
Script de verificaci√≥n del entorno para el workshop de extracci√≥n de empresas.
Ejecuta este script para verificar que todas las dependencias est√©n instaladas correctamente.
"""

import sys
import subprocess
import importlib.util

def check_python_version():
    """Verificar versi√≥n de Python"""
    print("üêç Verificando versi√≥n de Python...")
    version = sys.version_info
    if version.major == 3 and version.minor >= 8:
        print(f"   ‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"   ‚ùå Python {version.major}.{version.minor}.{version.micro} - Se requiere Python 3.8+")
        return False

def check_package(package_name, import_name=None):
    """Verificar si un paquete est√° instalado"""
    if import_name is None:
        import_name = package_name
    
    try:
        spec = importlib.util.find_spec(import_name)
        if spec is not None:
            print(f"   ‚úÖ {package_name} - OK")
            return True
        else:
            print(f"   ‚ùå {package_name} - No encontrado")
            return False
    except ImportError:
        print(f"   ‚ùå {package_name} - Error de importaci√≥n")
        return False

def check_playwright_browsers():
    """Verificar si los navegadores de Playwright est√°n instalados"""
    print("üåê Verificando navegadores de Playwright...")
    try:
        result = subprocess.run(
            [sys.executable, "-m", "playwright", "install", "--dry-run", "chromium"],
            capture_output=True,
            text=True,
            timeout=30
        )
        if "is already installed" in result.stdout or result.returncode == 0:
            print("   ‚úÖ Chromium - OK")
            return True
        else:
            print("   ‚ùå Chromium - No instalado")
            print("   üí° Ejecuta: python -m playwright install chromium")
            return False
    except Exception as e:
        print(f"   ‚ùå Error verificando Playwright: {e}")
        return False

def check_data_files():
    """Verificar que los archivos de datos existan"""
    print("üìÅ Verificando archivos de datos...")
    import os
    
    # Obtener rutas din√°micamente
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(script_dir)
    
    files_to_check = [
        (os.path.join(project_root, "data", "companies_demo.xlsx"), "Archivo de empresas demo"),
        (os.path.join(project_root, "data", "htmls"), "Directorio de HTMLs"),
        (os.path.join(project_root, "data", "processed"), "Directorio de resultados")
    ]
    
    all_good = True
    for file_path, description in files_to_check:
        if os.path.exists(file_path):
            print(f"   ‚úÖ {description} - OK")
        else:
            print(f"   ‚ùå {description} - No encontrado: {file_path}")
            # Intentar crear directorios si no existen
            if "Directorio" in description:
                try:
                    os.makedirs(file_path, exist_ok=True)
                    print(f"   ‚úÖ {description} - Creado autom√°ticamente")
                except Exception as e:
                    print(f"   ‚ùå Error creando directorio: {e}")
                    all_good = False
            else:
                all_good = False
    
    return all_good

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üîç Verificando configuraci√≥n del entorno...")
    print("=" * 50)
    
    checks = []
    
    # Verificar Python
    checks.append(check_python_version())
    
    # Verificar paquetes principales
    print("\nüì¶ Verificando paquetes de Python...")
    required_packages = [
        ("pandas", "pandas"),
        ("beautifulsoup4", "bs4"),
        ("playwright", "playwright"),
        ("aiohttp", "aiohttp"),
        ("google-generativeai", "google.generativeai"),
        ("openpyxl", "openpyxl"),
        ("matplotlib", "matplotlib"),
        ("jupyter", "jupyter")
    ]
    
    for package_name, import_name in required_packages:
        checks.append(check_package(package_name, import_name))
    
    # Verificar navegadores
    checks.append(check_playwright_browsers())
    
    # Verificar archivos de datos
    checks.append(check_data_files())
    
    # Resumen final
    print("\n" + "=" * 50)
    if all(checks):
        print("üéâ ¬°Todo listo! El entorno est√° configurado correctamente.")
        print("\nüìù Pr√≥ximos pasos:")
        print("   1. Obt√©n tu API key de Google Gemini: https://makersuite.google.com/app/apikey")
        print("   2. Configura la variable de entorno: export GEMINI_API_KEY='tu-api-key'")
        print("   3. Ejecuta el script: python 0_html_processing.py")
    else:
        print("‚ùå Hay problemas con la configuraci√≥n.")
        print("\nüîß Para solucionarlos:")
        print("   1. Instala las dependencias: pip install -r ../binder/requirements.txt")
        print("   2. Instala navegadores: python -m playwright install chromium")
        print("   3. Los directorios de datos se crean autom√°ticamente")
    
    return all(checks)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
